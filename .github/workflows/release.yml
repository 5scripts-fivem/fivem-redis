name: Auto-Update, Build, and Release

on:
  schedule:
    - cron: "0 * * * *"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-build-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Fetch version and message from API
        id: fetch_version
        env:
          API_URL: ${{ secrets.API_URL }}
        run: |
          API_RESPONSE=$(curl -s "$API_URL")
          API_VERSION=$(echo "$API_RESPONSE" | jq -r '.version')
          API_MESSAGE=$(echo "$API_RESPONSE" | jq -r '.message')

          echo "Fetched API version: $API_VERSION"
          echo "Release Notes: $API_MESSAGE"

          echo "API_VERSION=$API_VERSION" >> $GITHUB_ENV
          echo "API_MESSAGE=$API_MESSAGE" >> $GITHUB_ENV

      - name: Update fxmanifest.lua
        run: |
          sed -i 's/version\s*=\s*["\x27][0-9]\+\.[0-9]\+\.[0-9]\+["\x27]/version = "'"${{ env.API_VERSION }}"'"/' fxmanifest.lua

      - name: Update package.json
        run: |
          jq '.version = "${{ env.API_VERSION }}"' package.json > temp.json && mv temp.json package.json

      - name: Commit updated files
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          if [[ -n $(git status --porcelain) ]]; then
            git add fxmanifest.lua package.json
            git commit -m "chore: update version to ${{ env.API_VERSION }}"
            git push
          else
            echo "No changes detected, skipping commit."
          fi

      - name: Check if GitHub Release Exists
        id: check_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASES=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases")
          if echo "$RELEASES" | jq -r '.[].tag_name' | grep -q "v${{ env.API_VERSION }}"; then
            echo "Release v${{ env.API_VERSION }} already exists. Skipping."
            echo "RELEASE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "RELEASE_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Package the repository
        if: env.RELEASE_EXISTS == 'false'
        run: |
          rm -rf fivem-redis release
          mkdir -p fivem-redis
          rsync -av --progress ./ fivem-redis --exclude node_modules --exclude .git --exclude release
          mkdir -p release
          cd fivem-redis
          zip -r "../release/fivem-redis-${{ env.API_VERSION }}.zip" .
          cd ..


      - name: Upload build artifact (optional)
        if: env.RELEASE_EXISTS == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: fivem-redis-${{ env.API_VERSION }}
          path: release/fivem-redis-${{ env.API_VERSION }}.zip

      - name: Create GitHub Release
        if: env.RELEASE_EXISTS == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.API_VERSION }}
          name: v${{ env.API_VERSION }}
          body: |
            **Release Notes:**
            ${{ env.API_MESSAGE }}
          draft: false
          prerelease: false
          files: release/fivem-redis.zip
