name: Node.js resource auto release

on:
  schedule:
    - cron: "0 * * * *"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-build-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Fetch version and message from API
        id: fetch_version
        env:
          API_URL: ${{ secrets.API_URL }}
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | awk -F'/' '{print $2}')
          API_RESPONSE=$(curl -s "${API_URL}/${REPO_NAME}/?format=json")
          API_VERSION=$(echo "$API_RESPONSE" | jq -r '.version')
          API_MESSAGE=$(echo "$API_RESPONSE" | jq -r '.message')

          echo "API_VERSION=$API_VERSION" >> $GITHUB_ENV
          echo "API_MESSAGE=$API_MESSAGE" >> $GITHUB_ENV
          echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV

      - name: Get Previous Release Tag
        id: previous_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PREV_TAG=$(gh release list --json tagName --limit 1 | jq -r '.[0].tagName')
          if [ -z "$PREV_TAG" ] || [ "$PREV_TAG" == "null" ]; then
            PREV_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "PREV_TAG=$PREV_TAG" >> $GITHUB_ENV

      - name: Get Commit List
        id: commit_list
        run: |
          COMMIT_LOG=$(git log --pretty=format:"- %h %s" ${{ env.PREV_TAG }}..HEAD --invert-grep --grep "chore: update version")
          if [ -z "$COMMIT_LOG" ]; then
            COMMIT_LOG="No new commits since last release."
          fi
          echo "COMMIT_LOG<<EOF" >> $GITHUB_ENV
          echo "$COMMIT_LOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Generate Compare URL
        id: compare_url
        run: |
          COMPARE_URL="https://github.com/${{ github.repository }}/compare/${{ env.PREV_TAG }}...v${{ env.API_VERSION }}"
          echo "COMPARE_URL=$COMPARE_URL" >> $GITHUB_ENV

      - name: Update fxmanifest.lua
        run: |
          awk -v new_version="${{ env.API_VERSION }}" '{if ($1 == "version") gsub(/[0-9]+\.[0-9]+\.[0-9]+/, new_version); print}' fxmanifest.lua > temp.lua && mv temp.lua fxmanifest.lua

      - name: Update package.json
        run: |
          jq '.version = "${{ env.API_VERSION }}"' package.json > temp.json && mv temp.json package.json

      - name: Commit updated files
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          if [[ -n $(git status --porcelain) ]]; then
            git add fxmanifest.lua package.json
            git commit -m "chore: update version to ${{ env.API_VERSION }}"
            git push
          fi

      - name: Check if GitHub Release Exists
        id: check_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASES=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases")
          if echo "$RELEASES" | jq -r '.[].tag_name' | grep -q "v${{ env.API_VERSION }}"; then
            echo "RELEASE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "RELEASE_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Install Dependencies & Build
        if: env.RELEASE_EXISTS == 'false'
        run: |
          npm install --production
          npm run build

      - name: Package the repository
        if: env.RELEASE_EXISTS == 'false'
        run: |
          rm -rf ${{ env.REPO_NAME }} release
          mkdir -p ${{ env.REPO_NAME }}
          rsync -av --progress ./ ${{ env.REPO_NAME }} --exclude node_modules --exclude .git --exclude release
          mkdir -p release
          zip -r "release/${{ env.REPO_NAME }}-${{ env.API_VERSION }}.zip" ${{ env.REPO_NAME }}

      - name: Upload build artifact
        if: env.RELEASE_EXISTS == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.REPO_NAME }}-${{ env.API_VERSION }}
          path: release/${{ env.REPO_NAME }}-${{ env.API_VERSION }}.zip

      - name: Create GitHub Release
        if: env.RELEASE_EXISTS == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.API_VERSION }}
          name: v${{ env.API_VERSION }}
          body: |
            **Release Notes:**
            ${{ env.API_MESSAGE }}

            **Commits:**
            ${{ env.COMMIT_LOG }}

            **[Compare ${{ env.PREV_TAG }} - v${{ env.API_VERSION }}](${{ env.COMPARE_URL }})**
          draft: false
          prerelease: false
          files: release/${{ env.REPO_NAME }}-${{ env.API_VERSION }}.zip
